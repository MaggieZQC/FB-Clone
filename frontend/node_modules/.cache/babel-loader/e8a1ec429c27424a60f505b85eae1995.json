{"ast":null,"code":"import { __assign, __extends } from 'tslib';\nimport React from 'react';\nimport normalizeWheel from 'normalize-wheel';\n/**\r\n * Compute the dimension of the crop area based on media size,\r\n * aspect ratio and optionally rotation\r\n */\n\nfunction getCropSize(mediaWidth, mediaHeight, containerWidth, containerHeight, aspect, rotation) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  var _a = rotateSize(mediaWidth, mediaHeight, rotation),\n      width = _a.width,\n      height = _a.height;\n\n  var fittingWidth = Math.min(width, containerWidth);\n  var fittingHeight = Math.min(height, containerHeight);\n\n  if (fittingWidth > fittingHeight * aspect) {\n    return {\n      width: fittingHeight * aspect,\n      height: fittingHeight\n    };\n  }\n\n  return {\n    width: fittingWidth,\n    height: fittingWidth / aspect\n  };\n}\n/**\r\n * Compute media zoom.\r\n * We fit the media into the container with \"max-width: 100%; max-height: 100%;\"\r\n */\n\n\nfunction getMediaZoom(mediaSize) {\n  // Take the axis with more pixels to improve accuracy\n  return mediaSize.width > mediaSize.height ? mediaSize.width / mediaSize.naturalWidth : mediaSize.height / mediaSize.naturalHeight;\n}\n/**\r\n * Ensure a new media position stays in the crop area.\r\n */\n\n\nfunction restrictPosition(position, mediaSize, cropSize, zoom, rotation) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  var _a = rotateSize(mediaSize.width, mediaSize.height, rotation),\n      width = _a.width,\n      height = _a.height;\n\n  return {\n    x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, height, cropSize.height, zoom)\n  };\n}\n\nfunction restrictPositionCoord(position, mediaSize, cropSize, zoom) {\n  var maxPosition = mediaSize * zoom / 2 - cropSize / 2;\n  return clamp(position, -maxPosition, maxPosition);\n}\n\nfunction getDistanceBetweenPoints(pointA, pointB) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2));\n}\n\nfunction getRotationBetweenPoints(pointA, pointB) {\n  return Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180 / Math.PI;\n}\n/**\r\n * Compute the output cropped area of the media in percentages and pixels.\r\n * x/y are the top-left coordinates on the src media\r\n */\n\n\nfunction computeCroppedArea(crop, mediaSize, cropSize, aspect, zoom, rotation, restrictPosition) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  if (restrictPosition === void 0) {\n    restrictPosition = true;\n  } // if the media is rotated by the user, we cannot limit the position anymore\n  // as it might need to be negative.\n\n\n  var limitAreaFn = restrictPosition ? limitArea : noOp;\n  var mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation);\n  var mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation); // calculate the crop area in percentages\n  // in the rotated space\n\n  var croppedAreaPercentages = {\n    x: limitAreaFn(100, ((mediaBBoxSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaBBoxSize.width * 100),\n    y: limitAreaFn(100, ((mediaBBoxSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) / mediaBBoxSize.height * 100),\n    width: limitAreaFn(100, cropSize.width / mediaBBoxSize.width * 100 / zoom),\n    height: limitAreaFn(100, cropSize.height / mediaBBoxSize.height * 100 / zoom)\n  }; // we compute the pixels size naively\n\n  var widthInPixels = Math.round(limitAreaFn(mediaNaturalBBoxSize.width, croppedAreaPercentages.width * mediaNaturalBBoxSize.width / 100));\n  var heightInPixels = Math.round(limitAreaFn(mediaNaturalBBoxSize.height, croppedAreaPercentages.height * mediaNaturalBBoxSize.height / 100));\n  var isImgWiderThanHigh = mediaNaturalBBoxSize.width >= mediaNaturalBBoxSize.height * aspect; // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n  // if the media is wider than high, when zoom is 0, the crop height will be equals to image height\n  // thus we want to compute the width from the height and aspect for accuracy.\n  // Otherwise, we compute the height from width and aspect.\n\n  var sizePixels = isImgWiderThanHigh ? {\n    width: Math.round(heightInPixels * aspect),\n    height: heightInPixels\n  } : {\n    width: widthInPixels,\n    height: Math.round(widthInPixels / aspect)\n  };\n\n  var croppedAreaPixels = __assign(__assign({}, sizePixels), {\n    x: Math.round(limitAreaFn(mediaNaturalBBoxSize.width - sizePixels.width, croppedAreaPercentages.x * mediaNaturalBBoxSize.width / 100)),\n    y: Math.round(limitAreaFn(mediaNaturalBBoxSize.height - sizePixels.height, croppedAreaPercentages.y * mediaNaturalBBoxSize.height / 100))\n  });\n\n  return {\n    croppedAreaPercentages: croppedAreaPercentages,\n    croppedAreaPixels: croppedAreaPixels\n  };\n}\n/**\r\n * Ensure the returned value is between 0 and max\r\n */\n\n\nfunction limitArea(max, value) {\n  return Math.min(max, Math.max(0, value));\n}\n\nfunction noOp(_max, value) {\n  return value;\n}\n/**\r\n * Compute crop and zoom from the croppedAreaPercentages.\r\n */\n\n\nfunction getInitialCropFromCroppedAreaPercentages(croppedAreaPercentages, mediaSize, rotation, cropSize, minZoom, maxZoom) {\n  var mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation); // This is the inverse process of computeCroppedArea\n\n  var zoom = clamp(cropSize.width / mediaBBoxSize.width * (100 / croppedAreaPercentages.width), minZoom, maxZoom);\n  var crop = {\n    x: zoom * mediaBBoxSize.width / 2 - cropSize.width / 2 - mediaBBoxSize.width * zoom * (croppedAreaPercentages.x / 100),\n    y: zoom * mediaBBoxSize.height / 2 - cropSize.height / 2 - mediaBBoxSize.height * zoom * (croppedAreaPercentages.y / 100)\n  };\n  return {\n    crop: crop,\n    zoom: zoom\n  };\n}\n/**\r\n * Compute zoom from the croppedAreaPixels\r\n */\n\n\nfunction getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize) {\n  var mediaZoom = getMediaZoom(mediaSize);\n  return cropSize.height > cropSize.width ? cropSize.height / (croppedAreaPixels.height * mediaZoom) : cropSize.width / (croppedAreaPixels.width * mediaZoom);\n}\n/**\r\n * Compute crop and zoom from the croppedAreaPixels\r\n */\n\n\nfunction getInitialCropFromCroppedAreaPixels(croppedAreaPixels, mediaSize, rotation, cropSize, minZoom, maxZoom) {\n  if (rotation === void 0) {\n    rotation = 0;\n  }\n\n  var mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation);\n  var zoom = clamp(getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize), minZoom, maxZoom);\n  var cropZoom = cropSize.height > cropSize.width ? cropSize.height / croppedAreaPixels.height : cropSize.width / croppedAreaPixels.width;\n  var crop = {\n    x: ((mediaNaturalBBoxSize.width - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n    y: ((mediaNaturalBBoxSize.height - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) * cropZoom\n  };\n  return {\n    crop: crop,\n    zoom: zoom\n  };\n}\n/**\r\n * Return the point that is the center of point a and b\r\n */\n\n\nfunction getCenter(a, b) {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2\n  };\n}\n\nfunction getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\n/**\r\n * Returns the new bounding area of a rotated rectangle.\r\n */\n\n\nfunction rotateSize(width, height, rotation) {\n  var rotRad = getRadianAngle(rotation);\n  return {\n    width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height)\n  };\n}\n/**\r\n * Clamp value between min and max\r\n */\n\n\nfunction clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n/**\r\n * Combine multiple class names into a single string.\r\n */\n\n\nfunction classNames() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.filter(function (value) {\n    if (typeof value === 'string' && value.length > 0) {\n      return true;\n    }\n\n    return false;\n  }).join(' ').trim();\n}\n\nvar css_248z = \".reactEasyCrop_Container {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  overflow: hidden;\\n  user-select: none;\\n  touch-action: none;\\n  cursor: move;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.reactEasyCrop_Image,\\n.reactEasyCrop_Video {\\n  will-change: transform; /* this improves performances and prevent painting issues on iOS Chrome */\\n}\\n\\n.reactEasyCrop_Contain {\\n  max-width: 100%;\\n  max-height: 100%;\\n  margin: auto;\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  right: 0;\\n}\\n.reactEasyCrop_Cover_Horizontal {\\n  width: 100%;\\n  height: auto;\\n}\\n.reactEasyCrop_Cover_Vertical {\\n  width: auto;\\n  height: 100%;\\n}\\n\\n.reactEasyCrop_CropArea {\\n  position: absolute;\\n  left: 50%;\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  box-sizing: border-box;\\n  box-shadow: 0 0 0 9999em;\\n  color: rgba(0, 0, 0, 0.5);\\n  overflow: hidden;\\n}\\n\\n.reactEasyCrop_CropAreaRound {\\n  border-radius: 50%;\\n}\\n\\n.reactEasyCrop_CropAreaGrid::before {\\n  content: ' ';\\n  box-sizing: border-box;\\n  position: absolute;\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  top: 0;\\n  bottom: 0;\\n  left: 33.33%;\\n  right: 33.33%;\\n  border-top: 0;\\n  border-bottom: 0;\\n}\\n\\n.reactEasyCrop_CropAreaGrid::after {\\n  content: ' ';\\n  box-sizing: border-box;\\n  position: absolute;\\n  border: 1px solid rgba(255, 255, 255, 0.5);\\n  top: 33.33%;\\n  bottom: 33.33%;\\n  left: 0;\\n  right: 0;\\n  border-left: 0;\\n  border-right: 0;\\n}\\n\";\nvar MIN_ZOOM = 1;\nvar MAX_ZOOM = 3;\n\nvar Cropper =\n/** @class */\nfunction (_super) {\n  __extends(Cropper, _super);\n\n  function Cropper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.imageRef = /*#__PURE__*/React.createRef();\n    _this.videoRef = /*#__PURE__*/React.createRef();\n    _this.containerRef = null;\n    _this.styleRef = null;\n    _this.containerRect = null;\n    _this.mediaSize = {\n      width: 0,\n      height: 0,\n      naturalWidth: 0,\n      naturalHeight: 0\n    };\n    _this.dragStartPosition = {\n      x: 0,\n      y: 0\n    };\n    _this.dragStartCrop = {\n      x: 0,\n      y: 0\n    };\n    _this.lastPinchDistance = 0;\n    _this.lastPinchRotation = 0;\n    _this.rafDragTimeout = null;\n    _this.rafPinchTimeout = null;\n    _this.wheelTimer = null;\n    _this.state = {\n      cropSize: null,\n      hasWheelJustStarted: false\n    }; // this is to prevent Safari on iOS >= 10 to zoom the page\n\n    _this.preventZoomSafari = function (e) {\n      return e.preventDefault();\n    };\n\n    _this.cleanEvents = function () {\n      document.removeEventListener('mousemove', _this.onMouseMove);\n      document.removeEventListener('mouseup', _this.onDragStopped);\n      document.removeEventListener('touchmove', _this.onTouchMove);\n      document.removeEventListener('touchend', _this.onDragStopped);\n    };\n\n    _this.clearScrollEvent = function () {\n      if (_this.containerRef) _this.containerRef.removeEventListener('wheel', _this.onWheel);\n\n      if (_this.wheelTimer) {\n        clearTimeout(_this.wheelTimer);\n      }\n    };\n\n    _this.onMediaLoad = function () {\n      var cropSize = _this.computeSizes();\n\n      if (cropSize) {\n        _this.emitCropData();\n\n        _this.setInitialCrop(cropSize);\n      }\n\n      if (_this.props.onMediaLoaded) {\n        _this.props.onMediaLoaded(_this.mediaSize);\n      }\n    };\n\n    _this.setInitialCrop = function (cropSize) {\n      if (_this.props.initialCroppedAreaPercentages) {\n        var _a = getInitialCropFromCroppedAreaPercentages(_this.props.initialCroppedAreaPercentages, _this.mediaSize, _this.props.rotation, cropSize, _this.props.minZoom, _this.props.maxZoom),\n            crop = _a.crop,\n            zoom = _a.zoom;\n\n        _this.props.onCropChange(crop);\n\n        _this.props.onZoomChange && _this.props.onZoomChange(zoom);\n      } else if (_this.props.initialCroppedAreaPixels) {\n        var _b = getInitialCropFromCroppedAreaPixels(_this.props.initialCroppedAreaPixels, _this.mediaSize, _this.props.rotation, cropSize, _this.props.minZoom, _this.props.maxZoom),\n            crop = _b.crop,\n            zoom = _b.zoom;\n\n        _this.props.onCropChange(crop);\n\n        _this.props.onZoomChange && _this.props.onZoomChange(zoom);\n      }\n    };\n\n    _this.computeSizes = function () {\n      var _a, _b, _c, _d, _e, _f;\n\n      var mediaRef = _this.imageRef.current || _this.videoRef.current;\n\n      if (mediaRef && _this.containerRef) {\n        _this.containerRect = _this.containerRef.getBoundingClientRect();\n        var containerAspect = _this.containerRect.width / _this.containerRect.height;\n        var naturalWidth = ((_a = _this.imageRef.current) === null || _a === void 0 ? void 0 : _a.naturalWidth) || ((_b = _this.videoRef.current) === null || _b === void 0 ? void 0 : _b.videoWidth) || 0;\n        var naturalHeight = ((_c = _this.imageRef.current) === null || _c === void 0 ? void 0 : _c.naturalHeight) || ((_d = _this.videoRef.current) === null || _d === void 0 ? void 0 : _d.videoHeight) || 0;\n        var isMediaScaledDown = mediaRef.offsetWidth < naturalWidth || mediaRef.offsetHeight < naturalHeight;\n        var mediaAspect = naturalWidth / naturalHeight; // We do not rely on the offsetWidth/offsetHeight if the media is scaled down\n        // as the values they report are rounded. That will result in precision losses\n        // when calculating zoom. We use the fact that the media is positionned relative\n        // to the container. That allows us to use the container's dimensions\n        // and natural aspect ratio of the media to calculate accurate media size.\n        // However, for this to work, the container should not be rotated\n\n        var renderedMediaSize = void 0;\n\n        if (isMediaScaledDown) {\n          switch (_this.props.objectFit) {\n            default:\n            case 'contain':\n              renderedMediaSize = containerAspect > mediaAspect ? {\n                width: _this.containerRect.height * mediaAspect,\n                height: _this.containerRect.height\n              } : {\n                width: _this.containerRect.width,\n                height: _this.containerRect.width / mediaAspect\n              };\n              break;\n\n            case 'horizontal-cover':\n              renderedMediaSize = {\n                width: _this.containerRect.width,\n                height: _this.containerRect.width / mediaAspect\n              };\n              break;\n\n            case 'vertical-cover':\n              renderedMediaSize = {\n                width: _this.containerRect.height * mediaAspect,\n                height: _this.containerRect.height\n              };\n              break;\n\n            case 'auto-cover':\n              renderedMediaSize = naturalWidth > naturalHeight ? {\n                width: _this.containerRect.width,\n                height: _this.containerRect.width / mediaAspect\n              } : {\n                width: _this.containerRect.height * mediaAspect,\n                height: _this.containerRect.height\n              };\n              break;\n          }\n        } else {\n          renderedMediaSize = {\n            width: mediaRef.offsetWidth,\n            height: mediaRef.offsetHeight\n          };\n        }\n\n        _this.mediaSize = __assign(__assign({}, renderedMediaSize), {\n          naturalWidth: naturalWidth,\n          naturalHeight: naturalHeight\n        });\n        var cropSize = _this.props.cropSize ? _this.props.cropSize : getCropSize(_this.mediaSize.width, _this.mediaSize.height, _this.containerRect.width, _this.containerRect.height, _this.props.aspect, _this.props.rotation);\n\n        if (((_e = _this.state.cropSize) === null || _e === void 0 ? void 0 : _e.height) !== cropSize.height || ((_f = _this.state.cropSize) === null || _f === void 0 ? void 0 : _f.width) !== cropSize.width) {\n          _this.props.onCropSizeChange && _this.props.onCropSizeChange(cropSize);\n        }\n\n        _this.setState({\n          cropSize: cropSize\n        }, _this.recomputeCropPosition);\n\n        return cropSize;\n      }\n    };\n\n    _this.onMouseDown = function (e) {\n      e.preventDefault();\n      document.addEventListener('mousemove', _this.onMouseMove);\n      document.addEventListener('mouseup', _this.onDragStopped);\n\n      _this.onDragStart(Cropper.getMousePoint(e));\n    };\n\n    _this.onMouseMove = function (e) {\n      return _this.onDrag(Cropper.getMousePoint(e));\n    };\n\n    _this.onTouchStart = function (e) {\n      if (_this.props.onTouchRequest && !_this.props.onTouchRequest(e)) {\n        return;\n      }\n\n      document.addEventListener('touchmove', _this.onTouchMove, {\n        passive: false\n      }); // iOS 11 now defaults to passive: true\n\n      document.addEventListener('touchend', _this.onDragStopped);\n\n      if (e.touches.length === 2) {\n        _this.onPinchStart(e);\n      } else if (e.touches.length === 1) {\n        _this.onDragStart(Cropper.getTouchPoint(e.touches[0]));\n      }\n    };\n\n    _this.onTouchMove = function (e) {\n      // Prevent whole page from scrolling on iOS.\n      e.preventDefault();\n\n      if (e.touches.length === 2) {\n        _this.onPinchMove(e);\n      } else if (e.touches.length === 1) {\n        _this.onDrag(Cropper.getTouchPoint(e.touches[0]));\n      }\n    };\n\n    _this.onDragStart = function (_a) {\n      var _b, _c;\n\n      var x = _a.x,\n          y = _a.y;\n      _this.dragStartPosition = {\n        x: x,\n        y: y\n      };\n      _this.dragStartCrop = __assign({}, _this.props.crop);\n      (_c = (_b = _this.props).onInteractionStart) === null || _c === void 0 ? void 0 : _c.call(_b);\n    };\n\n    _this.onDrag = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n      if (_this.rafDragTimeout) window.cancelAnimationFrame(_this.rafDragTimeout);\n      _this.rafDragTimeout = window.requestAnimationFrame(function () {\n        if (!_this.state.cropSize) return;\n        if (x === undefined || y === undefined) return;\n        var offsetX = x - _this.dragStartPosition.x;\n        var offsetY = y - _this.dragStartPosition.y;\n        var requestedPosition = {\n          x: _this.dragStartCrop.x + offsetX,\n          y: _this.dragStartCrop.y + offsetY\n        };\n        var newPosition = _this.props.restrictPosition ? restrictPosition(requestedPosition, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : requestedPosition;\n\n        _this.props.onCropChange(newPosition);\n      });\n    };\n\n    _this.onDragStopped = function () {\n      var _a, _b;\n\n      _this.cleanEvents();\n\n      _this.emitCropData();\n\n      (_b = (_a = _this.props).onInteractionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n\n    _this.onWheel = function (e) {\n      if (_this.props.onWheelRequest && !_this.props.onWheelRequest(e)) {\n        return;\n      }\n\n      e.preventDefault();\n      var point = Cropper.getMousePoint(e);\n      var pixelY = normalizeWheel(e).pixelY;\n      var newZoom = _this.props.zoom - pixelY * _this.props.zoomSpeed / 200;\n\n      _this.setNewZoom(newZoom, point);\n\n      if (!_this.state.hasWheelJustStarted) {\n        _this.setState({\n          hasWheelJustStarted: true\n        }, function () {\n          var _a, _b;\n\n          return (_b = (_a = _this.props).onInteractionStart) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n      }\n\n      if (_this.wheelTimer) {\n        clearTimeout(_this.wheelTimer);\n      }\n\n      _this.wheelTimer = window.setTimeout(function () {\n        return _this.setState({\n          hasWheelJustStarted: false\n        }, function () {\n          var _a, _b;\n\n          return (_b = (_a = _this.props).onInteractionEnd) === null || _b === void 0 ? void 0 : _b.call(_a);\n        });\n      }, 250);\n    };\n\n    _this.getPointOnContainer = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n\n      if (!_this.containerRect) {\n        throw new Error('The Cropper is not mounted');\n      }\n\n      return {\n        x: _this.containerRect.width / 2 - (x - _this.containerRect.left),\n        y: _this.containerRect.height / 2 - (y - _this.containerRect.top)\n      };\n    };\n\n    _this.getPointOnMedia = function (_a) {\n      var x = _a.x,\n          y = _a.y;\n      var _b = _this.props,\n          crop = _b.crop,\n          zoom = _b.zoom;\n      return {\n        x: (x + crop.x) / zoom,\n        y: (y + crop.y) / zoom\n      };\n    };\n\n    _this.setNewZoom = function (zoom, point) {\n      if (!_this.state.cropSize || !_this.props.onZoomChange) return;\n\n      var zoomPoint = _this.getPointOnContainer(point);\n\n      var zoomTarget = _this.getPointOnMedia(zoomPoint);\n\n      var newZoom = clamp(zoom, _this.props.minZoom, _this.props.maxZoom);\n      var requestedPosition = {\n        x: zoomTarget.x * newZoom - zoomPoint.x,\n        y: zoomTarget.y * newZoom - zoomPoint.y\n      };\n      var newPosition = _this.props.restrictPosition ? restrictPosition(requestedPosition, _this.mediaSize, _this.state.cropSize, newZoom, _this.props.rotation) : requestedPosition;\n\n      _this.props.onCropChange(newPosition);\n\n      _this.props.onZoomChange(newZoom);\n    };\n\n    _this.getCropData = function () {\n      if (!_this.state.cropSize) {\n        return null;\n      } // this is to ensure the crop is correctly restricted after a zoom back (https://github.com/ValentinH/react-easy-crop/issues/6)\n\n\n      var restrictedPosition = _this.props.restrictPosition ? restrictPosition(_this.props.crop, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : _this.props.crop;\n      return computeCroppedArea(restrictedPosition, _this.mediaSize, _this.state.cropSize, _this.getAspect(), _this.props.zoom, _this.props.rotation, _this.props.restrictPosition);\n    };\n\n    _this.emitCropData = function () {\n      var cropData = _this.getCropData();\n\n      if (!cropData) return;\n      var croppedAreaPercentages = cropData.croppedAreaPercentages,\n          croppedAreaPixels = cropData.croppedAreaPixels;\n\n      if (_this.props.onCropComplete) {\n        _this.props.onCropComplete(croppedAreaPercentages, croppedAreaPixels);\n      }\n\n      if (_this.props.onCropAreaChange) {\n        _this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels);\n      }\n    };\n\n    _this.emitCropAreaChange = function () {\n      var cropData = _this.getCropData();\n\n      if (!cropData) return;\n      var croppedAreaPercentages = cropData.croppedAreaPercentages,\n          croppedAreaPixels = cropData.croppedAreaPixels;\n\n      if (_this.props.onCropAreaChange) {\n        _this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels);\n      }\n    };\n\n    _this.recomputeCropPosition = function () {\n      if (!_this.state.cropSize) return;\n      var newPosition = _this.props.restrictPosition ? restrictPosition(_this.props.crop, _this.mediaSize, _this.state.cropSize, _this.props.zoom, _this.props.rotation) : _this.props.crop;\n\n      _this.props.onCropChange(newPosition);\n\n      _this.emitCropData();\n    };\n\n    return _this;\n  }\n\n  Cropper.prototype.componentDidMount = function () {\n    window.addEventListener('resize', this.computeSizes);\n\n    if (this.containerRef) {\n      this.props.zoomWithScroll && this.containerRef.addEventListener('wheel', this.onWheel, {\n        passive: false\n      });\n      this.containerRef.addEventListener('gesturestart', this.preventZoomSafari);\n      this.containerRef.addEventListener('gesturechange', this.preventZoomSafari);\n    }\n\n    if (!this.props.disableAutomaticStylesInjection) {\n      this.styleRef = document.createElement('style');\n      this.styleRef.setAttribute('type', 'text/css');\n\n      if (this.props.nonce) {\n        this.styleRef.setAttribute('nonce', this.props.nonce);\n      }\n\n      this.styleRef.innerHTML = css_248z;\n      document.head.appendChild(this.styleRef);\n    } // when rendered via SSR, the image can already be loaded and its onLoad callback will never be called\n\n\n    if (this.imageRef.current && this.imageRef.current.complete) {\n      this.onMediaLoad();\n    } // set image and video refs in the parent if the callbacks exist\n\n\n    if (this.props.setImageRef) {\n      this.props.setImageRef(this.imageRef);\n    }\n\n    if (this.props.setVideoRef) {\n      this.props.setVideoRef(this.videoRef);\n    }\n  };\n\n  Cropper.prototype.componentWillUnmount = function () {\n    var _a;\n\n    window.removeEventListener('resize', this.computeSizes);\n\n    if (this.containerRef) {\n      this.containerRef.removeEventListener('gesturestart', this.preventZoomSafari);\n      this.containerRef.removeEventListener('gesturechange', this.preventZoomSafari);\n    }\n\n    if (this.styleRef) {\n      (_a = this.styleRef.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.styleRef);\n    }\n\n    this.cleanEvents();\n    this.props.zoomWithScroll && this.clearScrollEvent();\n  };\n\n  Cropper.prototype.componentDidUpdate = function (prevProps) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    if (prevProps.rotation !== this.props.rotation) {\n      this.computeSizes();\n      this.recomputeCropPosition();\n    } else if (prevProps.aspect !== this.props.aspect) {\n      this.computeSizes();\n    } else if (prevProps.zoom !== this.props.zoom) {\n      this.recomputeCropPosition();\n    } else if (((_a = prevProps.cropSize) === null || _a === void 0 ? void 0 : _a.height) !== ((_b = this.props.cropSize) === null || _b === void 0 ? void 0 : _b.height) || ((_c = prevProps.cropSize) === null || _c === void 0 ? void 0 : _c.width) !== ((_d = this.props.cropSize) === null || _d === void 0 ? void 0 : _d.width)) {\n      this.computeSizes();\n    } else if (((_e = prevProps.crop) === null || _e === void 0 ? void 0 : _e.x) !== ((_f = this.props.crop) === null || _f === void 0 ? void 0 : _f.x) || ((_g = prevProps.crop) === null || _g === void 0 ? void 0 : _g.y) !== ((_h = this.props.crop) === null || _h === void 0 ? void 0 : _h.y)) {\n      this.emitCropAreaChange();\n    }\n\n    if (prevProps.zoomWithScroll !== this.props.zoomWithScroll && this.containerRef) {\n      this.props.zoomWithScroll ? this.containerRef.addEventListener('wheel', this.onWheel, {\n        passive: false\n      }) : this.clearScrollEvent();\n    }\n\n    if (prevProps.video !== this.props.video) {\n      (_j = this.videoRef.current) === null || _j === void 0 ? void 0 : _j.load();\n    }\n  };\n\n  Cropper.prototype.getAspect = function () {\n    var _a = this.props,\n        cropSize = _a.cropSize,\n        aspect = _a.aspect;\n\n    if (cropSize) {\n      return cropSize.width / cropSize.height;\n    }\n\n    return aspect;\n  };\n\n  Cropper.prototype.onPinchStart = function (e) {\n    var pointA = Cropper.getTouchPoint(e.touches[0]);\n    var pointB = Cropper.getTouchPoint(e.touches[1]);\n    this.lastPinchDistance = getDistanceBetweenPoints(pointA, pointB);\n    this.lastPinchRotation = getRotationBetweenPoints(pointA, pointB);\n    this.onDragStart(getCenter(pointA, pointB));\n  };\n\n  Cropper.prototype.onPinchMove = function (e) {\n    var _this = this;\n\n    var pointA = Cropper.getTouchPoint(e.touches[0]);\n    var pointB = Cropper.getTouchPoint(e.touches[1]);\n    var center = getCenter(pointA, pointB);\n    this.onDrag(center);\n    if (this.rafPinchTimeout) window.cancelAnimationFrame(this.rafPinchTimeout);\n    this.rafPinchTimeout = window.requestAnimationFrame(function () {\n      var distance = getDistanceBetweenPoints(pointA, pointB);\n      var newZoom = _this.props.zoom * (distance / _this.lastPinchDistance);\n\n      _this.setNewZoom(newZoom, center);\n\n      _this.lastPinchDistance = distance;\n      var rotation = getRotationBetweenPoints(pointA, pointB);\n      var newRotation = _this.props.rotation + (rotation - _this.lastPinchRotation);\n      _this.props.onRotationChange && _this.props.onRotationChange(newRotation);\n      _this.lastPinchRotation = rotation;\n    });\n  };\n\n  Cropper.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        image = _a.image,\n        video = _a.video,\n        mediaProps = _a.mediaProps,\n        transform = _a.transform,\n        _b = _a.crop,\n        x = _b.x,\n        y = _b.y,\n        rotation = _a.rotation,\n        zoom = _a.zoom,\n        cropShape = _a.cropShape,\n        showGrid = _a.showGrid,\n        _c = _a.style,\n        containerStyle = _c.containerStyle,\n        cropAreaStyle = _c.cropAreaStyle,\n        mediaStyle = _c.mediaStyle,\n        _d = _a.classes,\n        containerClassName = _d.containerClassName,\n        cropAreaClassName = _d.cropAreaClassName,\n        mediaClassName = _d.mediaClassName,\n        objectFit = _a.objectFit;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      onMouseDown: this.onMouseDown,\n      onTouchStart: this.onTouchStart,\n      ref: function ref(el) {\n        return _this.containerRef = el;\n      },\n      \"data-testid\": \"container\",\n      style: containerStyle,\n      className: classNames('reactEasyCrop_Container', containerClassName)\n    }, image ? /*#__PURE__*/React.createElement(\"img\", __assign({\n      alt: \"\",\n      className: classNames('reactEasyCrop_Image', objectFit === 'contain' && 'reactEasyCrop_Contain', objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal', objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical', objectFit === 'auto-cover' && (this.mediaSize.naturalWidth > this.mediaSize.naturalHeight ? 'reactEasyCrop_Cover_Horizontal' : 'reactEasyCrop_Cover_Vertical'), mediaClassName)\n    }, mediaProps, {\n      src: image,\n      ref: this.imageRef,\n      style: __assign(__assign({}, mediaStyle), {\n        transform: transform || \"translate(\" + x + \"px, \" + y + \"px) rotate(\" + rotation + \"deg) scale(\" + zoom + \")\"\n      }),\n      onLoad: this.onMediaLoad\n    })) : video && /*#__PURE__*/React.createElement(\"video\", __assign({\n      autoPlay: true,\n      loop: true,\n      muted: true,\n      className: classNames('reactEasyCrop_Video', objectFit === 'contain' && 'reactEasyCrop_Contain', objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal', objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical', objectFit === 'auto-cover' && (this.mediaSize.naturalWidth > this.mediaSize.naturalHeight ? 'reactEasyCrop_Cover_Horizontal' : 'reactEasyCrop_Cover_Vertical'), mediaClassName)\n    }, mediaProps, {\n      ref: this.videoRef,\n      onLoadedMetadata: this.onMediaLoad,\n      style: __assign(__assign({}, mediaStyle), {\n        transform: transform || \"translate(\" + x + \"px, \" + y + \"px) rotate(\" + rotation + \"deg) scale(\" + zoom + \")\"\n      }),\n      controls: false\n    }), (Array.isArray(video) ? video : [{\n      src: video\n    }]).map(function (item) {\n      return /*#__PURE__*/React.createElement(\"source\", __assign({\n        key: item.src\n      }, item));\n    })), this.state.cropSize && /*#__PURE__*/React.createElement(\"div\", {\n      style: __assign(__assign({}, cropAreaStyle), {\n        width: this.state.cropSize.width,\n        height: this.state.cropSize.height\n      }),\n      \"data-testid\": \"cropper\",\n      className: classNames('reactEasyCrop_CropArea', cropShape === 'round' && 'reactEasyCrop_CropAreaRound', showGrid && 'reactEasyCrop_CropAreaGrid', cropAreaClassName)\n    }));\n  };\n\n  Cropper.defaultProps = {\n    zoom: 1,\n    rotation: 0,\n    aspect: 4 / 3,\n    maxZoom: MAX_ZOOM,\n    minZoom: MIN_ZOOM,\n    cropShape: 'rect',\n    objectFit: 'contain',\n    showGrid: true,\n    style: {},\n    classes: {},\n    mediaProps: {},\n    zoomSpeed: 1,\n    restrictPosition: true,\n    zoomWithScroll: true\n  };\n\n  Cropper.getMousePoint = function (e) {\n    return {\n      x: Number(e.clientX),\n      y: Number(e.clientY)\n    };\n  };\n\n  Cropper.getTouchPoint = function (touch) {\n    return {\n      x: Number(touch.clientX),\n      y: Number(touch.clientY)\n    };\n  };\n\n  return Cropper;\n}(React.Component);\n\nexport default Cropper;","map":{"version":3,"mappings":"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","names":["getCropSize","mediaWidth","mediaHeight","containerWidth","containerHeight","aspect","rotation","rotateSize","width","height","fittingWidth","Math","min","fittingHeight","getMediaZoom","mediaSize","naturalWidth","naturalHeight","restrictPosition","position","cropSize","zoom","x","restrictPositionCoord","y","maxPosition","clamp","getDistanceBetweenPoints","pointA","pointB","sqrt","pow","getRotationBetweenPoints","atan2","PI","computeCroppedArea","crop","limitAreaFn","limitArea","noOp","mediaBBoxSize","mediaNaturalBBoxSize","croppedAreaPercentages","widthInPixels","round","heightInPixels","isImgWiderThanHigh","sizePixels","croppedAreaPixels","max","value","_max","getInitialCropFromCroppedAreaPercentages","minZoom","maxZoom","getZoomFromCroppedAreaPixels","mediaZoom","getInitialCropFromCroppedAreaPixels","cropZoom","getCenter","a","b","getRadianAngle","degreeValue","rotRad","abs","cos","sin","classNames","args","filter","length","join","trim","MIN_ZOOM","MAX_ZOOM","__extends","_this","React","createRef","hasWheelJustStarted","e","preventDefault","document","removeEventListener","onMouseMove","onDragStopped","onTouchMove","containerRef","onWheel","wheelTimer","clearTimeout","computeSizes","emitCropData","setInitialCrop","props","onMediaLoaded","initialCroppedAreaPercentages","onCropChange","onZoomChange","initialCroppedAreaPixels","mediaRef","imageRef","current","videoRef","containerRect","getBoundingClientRect","containerAspect","videoWidth","videoHeight","isMediaScaledDown","offsetWidth","offsetHeight","mediaAspect","renderedMediaSize","objectFit","state","onCropSizeChange","setState","recomputeCropPosition","addEventListener","onDragStart","Cropper","getMousePoint","onDrag","onTouchRequest","passive","touches","onPinchStart","getTouchPoint","onPinchMove","_a","dragStartPosition","dragStartCrop","onInteractionStart","rafDragTimeout","window","cancelAnimationFrame","requestAnimationFrame","undefined","offsetX","offsetY","requestedPosition","newPosition","cleanEvents","onInteractionEnd","onWheelRequest","point","normalizeWheel","newZoom","pixelY","zoomSpeed","setNewZoom","setTimeout","Error","left","top","zoomPoint","getPointOnContainer","zoomTarget","getPointOnMedia","restrictedPosition","getAspect","cropData","getCropData","onCropComplete","onCropAreaChange","zoomWithScroll","preventZoomSafari","disableAutomaticStylesInjection","styleRef","createElement","setAttribute","nonce","innerHTML","cssStyles","head","appendChild","complete","onMediaLoad","setImageRef","setVideoRef","parentNode","removeChild","clearScrollEvent","prevProps","emitCropAreaChange","video","load","lastPinchDistance","lastPinchRotation","center","rafPinchTimeout","distance","newRotation","onRotationChange","image","mediaProps","transform","_b","cropShape","showGrid","_c","containerStyle","cropAreaStyle","mediaStyle","_d","containerClassName","cropAreaClassName","mediaClassName","onMouseDown","onTouchStart","ref","el","style","className","alt","src","onLoad","autoPlay","loop","muted","onLoadedMetadata","controls","Array","isArray","map","item","key","classes","Number","clientX","clientY","touch","Component"],"sources":["C:\\Users\\Zhuoq\\facebook_clone\\frontend\\node_modules\\src\\helpers.ts","C:\\Users\\Zhuoq\\facebook_clone\\frontend\\node_modules\\src\\Cropper.tsx"],"sourcesContent":["import { Area, MediaSize, Point, Size } from './types'\n\n/**\n * Compute the dimension of the crop area based on media size,\n * aspect ratio and optionally rotation\n */\nexport function getCropSize(\n  mediaWidth: number,\n  mediaHeight: number,\n  containerWidth: number,\n  containerHeight: number,\n  aspect: number,\n  rotation = 0\n): Size {\n  const { width, height } = rotateSize(mediaWidth, mediaHeight, rotation)\n  const fittingWidth = Math.min(width, containerWidth)\n  const fittingHeight = Math.min(height, containerHeight)\n\n  if (fittingWidth > fittingHeight * aspect) {\n    return {\n      width: fittingHeight * aspect,\n      height: fittingHeight,\n    }\n  }\n\n  return {\n    width: fittingWidth,\n    height: fittingWidth / aspect,\n  }\n}\n\n/**\n * Compute media zoom.\n * We fit the media into the container with \"max-width: 100%; max-height: 100%;\"\n */\nexport function getMediaZoom(mediaSize: MediaSize) {\n  // Take the axis with more pixels to improve accuracy\n  return mediaSize.width > mediaSize.height\n    ? mediaSize.width / mediaSize.naturalWidth\n    : mediaSize.height / mediaSize.naturalHeight\n}\n\n/**\n * Ensure a new media position stays in the crop area.\n */\nexport function restrictPosition(\n  position: Point,\n  mediaSize: Size,\n  cropSize: Size,\n  zoom: number,\n  rotation = 0\n): Point {\n  const { width, height } = rotateSize(mediaSize.width, mediaSize.height, rotation)\n\n  return {\n    x: restrictPositionCoord(position.x, width, cropSize.width, zoom),\n    y: restrictPositionCoord(position.y, height, cropSize.height, zoom),\n  }\n}\n\nfunction restrictPositionCoord(\n  position: number,\n  mediaSize: number,\n  cropSize: number,\n  zoom: number\n): number {\n  const maxPosition = (mediaSize * zoom) / 2 - cropSize / 2\n\n  return clamp(position, -maxPosition, maxPosition)\n}\n\nexport function getDistanceBetweenPoints(pointA: Point, pointB: Point) {\n  return Math.sqrt(Math.pow(pointA.y - pointB.y, 2) + Math.pow(pointA.x - pointB.x, 2))\n}\n\nexport function getRotationBetweenPoints(pointA: Point, pointB: Point) {\n  return (Math.atan2(pointB.y - pointA.y, pointB.x - pointA.x) * 180) / Math.PI\n}\n\n/**\n * Compute the output cropped area of the media in percentages and pixels.\n * x/y are the top-left coordinates on the src media\n */\nexport function computeCroppedArea(\n  crop: Point,\n  mediaSize: MediaSize,\n  cropSize: Size,\n  aspect: number,\n  zoom: number,\n  rotation = 0,\n  restrictPosition = true\n): { croppedAreaPercentages: Area; croppedAreaPixels: Area } {\n  // if the media is rotated by the user, we cannot limit the position anymore\n  // as it might need to be negative.\n  const limitAreaFn = restrictPosition ? limitArea : noOp\n\n  const mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation)\n  const mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation)\n\n  // calculate the crop area in percentages\n  // in the rotated space\n  const croppedAreaPercentages = {\n    x: limitAreaFn(\n      100,\n      (((mediaBBoxSize.width - cropSize.width / zoom) / 2 - crop.x / zoom) / mediaBBoxSize.width) *\n        100\n    ),\n    y: limitAreaFn(\n      100,\n      (((mediaBBoxSize.height - cropSize.height / zoom) / 2 - crop.y / zoom) /\n        mediaBBoxSize.height) *\n        100\n    ),\n    width: limitAreaFn(100, ((cropSize.width / mediaBBoxSize.width) * 100) / zoom),\n    height: limitAreaFn(100, ((cropSize.height / mediaBBoxSize.height) * 100) / zoom),\n  }\n\n  // we compute the pixels size naively\n  const widthInPixels = Math.round(\n    limitAreaFn(\n      mediaNaturalBBoxSize.width,\n      (croppedAreaPercentages.width * mediaNaturalBBoxSize.width) / 100\n    )\n  )\n  const heightInPixels = Math.round(\n    limitAreaFn(\n      mediaNaturalBBoxSize.height,\n      (croppedAreaPercentages.height * mediaNaturalBBoxSize.height) / 100\n    )\n  )\n  const isImgWiderThanHigh = mediaNaturalBBoxSize.width >= mediaNaturalBBoxSize.height * aspect\n\n  // then we ensure the width and height exactly match the aspect (to avoid rounding approximations)\n  // if the media is wider than high, when zoom is 0, the crop height will be equals to image height\n  // thus we want to compute the width from the height and aspect for accuracy.\n  // Otherwise, we compute the height from width and aspect.\n  const sizePixels = isImgWiderThanHigh\n    ? {\n        width: Math.round(heightInPixels * aspect),\n        height: heightInPixels,\n      }\n    : {\n        width: widthInPixels,\n        height: Math.round(widthInPixels / aspect),\n      }\n\n  const croppedAreaPixels = {\n    ...sizePixels,\n    x: Math.round(\n      limitAreaFn(\n        mediaNaturalBBoxSize.width - sizePixels.width,\n        (croppedAreaPercentages.x * mediaNaturalBBoxSize.width) / 100\n      )\n    ),\n    y: Math.round(\n      limitAreaFn(\n        mediaNaturalBBoxSize.height - sizePixels.height,\n        (croppedAreaPercentages.y * mediaNaturalBBoxSize.height) / 100\n      )\n    ),\n  }\n\n  return { croppedAreaPercentages, croppedAreaPixels }\n}\n\n/**\n * Ensure the returned value is between 0 and max\n */\nfunction limitArea(max: number, value: number): number {\n  return Math.min(max, Math.max(0, value))\n}\n\nfunction noOp(_max: number, value: number) {\n  return value\n}\n\n/**\n * Compute crop and zoom from the croppedAreaPercentages.\n */\nexport function getInitialCropFromCroppedAreaPercentages(\n  croppedAreaPercentages: Area,\n  mediaSize: MediaSize,\n  rotation: number,\n  cropSize: Size,\n  minZoom: number,\n  maxZoom: number\n) {\n  const mediaBBoxSize = rotateSize(mediaSize.width, mediaSize.height, rotation)\n\n  // This is the inverse process of computeCroppedArea\n  const zoom = clamp(\n    (cropSize.width / mediaBBoxSize.width) * (100 / croppedAreaPercentages.width),\n    minZoom,\n    maxZoom\n  )\n\n  const crop = {\n    x:\n      (zoom * mediaBBoxSize.width) / 2 -\n      cropSize.width / 2 -\n      mediaBBoxSize.width * zoom * (croppedAreaPercentages.x / 100),\n    y:\n      (zoom * mediaBBoxSize.height) / 2 -\n      cropSize.height / 2 -\n      mediaBBoxSize.height * zoom * (croppedAreaPercentages.y / 100),\n  }\n\n  return { crop, zoom }\n}\n\n/**\n * Compute zoom from the croppedAreaPixels\n */\nfunction getZoomFromCroppedAreaPixels(\n  croppedAreaPixels: Area,\n  mediaSize: MediaSize,\n  cropSize: Size\n): number {\n  const mediaZoom = getMediaZoom(mediaSize)\n\n  return cropSize.height > cropSize.width\n    ? cropSize.height / (croppedAreaPixels.height * mediaZoom)\n    : cropSize.width / (croppedAreaPixels.width * mediaZoom)\n}\n\n/**\n * Compute crop and zoom from the croppedAreaPixels\n */\nexport function getInitialCropFromCroppedAreaPixels(\n  croppedAreaPixels: Area,\n  mediaSize: MediaSize,\n  rotation = 0,\n  cropSize: Size,\n  minZoom: number,\n  maxZoom: number\n): { crop: Point; zoom: number } {\n  const mediaNaturalBBoxSize = rotateSize(mediaSize.naturalWidth, mediaSize.naturalHeight, rotation)\n\n  const zoom = clamp(\n    getZoomFromCroppedAreaPixels(croppedAreaPixels, mediaSize, cropSize),\n    minZoom,\n    maxZoom\n  )\n\n  const cropZoom =\n    cropSize.height > cropSize.width\n      ? cropSize.height / croppedAreaPixels.height\n      : cropSize.width / croppedAreaPixels.width\n\n  const crop = {\n    x:\n      ((mediaNaturalBBoxSize.width - croppedAreaPixels.width) / 2 - croppedAreaPixels.x) * cropZoom,\n    y:\n      ((mediaNaturalBBoxSize.height - croppedAreaPixels.height) / 2 - croppedAreaPixels.y) *\n      cropZoom,\n  }\n  return { crop, zoom }\n}\n\n/**\n * Return the point that is the center of point a and b\n */\nexport function getCenter(a: Point, b: Point): Point {\n  return {\n    x: (b.x + a.x) / 2,\n    y: (b.y + a.y) / 2,\n  }\n}\n\nexport function getRadianAngle(degreeValue: number) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\nexport function rotateSize(width: number, height: number, rotation: number): Size {\n  const rotRad = getRadianAngle(rotation)\n\n  return {\n    width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\n  }\n}\n\n/**\n * Clamp value between min and max\n */\nexport function clamp(value: number, min: number, max: number) {\n  return Math.min(Math.max(value, min), max)\n}\n\n/**\n * Combine multiple class names into a single string.\n */\nexport function classNames(...args: (boolean | string | number | undefined | void | null)[]) {\n  return args\n    .filter((value) => {\n      if (typeof value === 'string' && value.length > 0) {\n        return true\n      }\n\n      return false\n    })\n    .join(' ')\n    .trim()\n}\n","import React from 'react'\nimport normalizeWheel from 'normalize-wheel'\nimport { Area, MediaSize, Point, Size, VideoSrc } from './types'\nimport {\n  getCropSize,\n  restrictPosition,\n  getDistanceBetweenPoints,\n  getRotationBetweenPoints,\n  computeCroppedArea,\n  getCenter,\n  getInitialCropFromCroppedAreaPixels,\n  getInitialCropFromCroppedAreaPercentages,\n  classNames,\n  clamp,\n} from './helpers'\nimport cssStyles from './styles.css'\n\nexport type CropperProps = {\n  image?: string\n  video?: string | VideoSrc[]\n  transform?: string\n  crop: Point\n  zoom: number\n  rotation: number\n  aspect: number\n  minZoom: number\n  maxZoom: number\n  cropShape: 'rect' | 'round'\n  cropSize?: Size\n  objectFit?: 'contain' | 'horizontal-cover' | 'vertical-cover' | 'auto-cover'\n  showGrid?: boolean\n  zoomSpeed: number\n  zoomWithScroll?: boolean\n  onCropChange: (location: Point) => void\n  onZoomChange?: (zoom: number) => void\n  onRotationChange?: (rotation: number) => void\n  onCropComplete?: (croppedArea: Area, croppedAreaPixels: Area) => void\n  onCropAreaChange?: (croppedArea: Area, croppedAreaPixels: Area) => void\n  onCropSizeChange?: (cropSize: Size) => void\n  onInteractionStart?: () => void\n  onInteractionEnd?: () => void\n  onMediaLoaded?: (mediaSize: MediaSize) => void\n  style: {\n    containerStyle?: React.CSSProperties\n    mediaStyle?: React.CSSProperties\n    cropAreaStyle?: React.CSSProperties\n  }\n  classes: {\n    containerClassName?: string\n    mediaClassName?: string\n    cropAreaClassName?: string\n  }\n  restrictPosition: boolean\n  mediaProps: React.ImgHTMLAttributes<HTMLElement> | React.VideoHTMLAttributes<HTMLElement>\n  disableAutomaticStylesInjection?: boolean\n  initialCroppedAreaPixels?: Area\n  initialCroppedAreaPercentages?: Area\n  onTouchRequest?: (e: React.TouchEvent<HTMLDivElement>) => boolean\n  onWheelRequest?: (e: WheelEvent) => boolean\n  setImageRef?: (ref: React.RefObject<HTMLImageElement>) => void\n  setVideoRef?: (ref: React.RefObject<HTMLVideoElement>) => void\n  nonce?: string\n}\n\ntype State = {\n  cropSize: Size | null\n  hasWheelJustStarted: boolean\n}\n\nconst MIN_ZOOM = 1\nconst MAX_ZOOM = 3\n\nclass Cropper extends React.Component<CropperProps, State> {\n  static defaultProps = {\n    zoom: 1,\n    rotation: 0,\n    aspect: 4 / 3,\n    maxZoom: MAX_ZOOM,\n    minZoom: MIN_ZOOM,\n    cropShape: 'rect' as const,\n    objectFit: 'contain' as const,\n    showGrid: true,\n    style: {},\n    classes: {},\n    mediaProps: {},\n    zoomSpeed: 1,\n    restrictPosition: true,\n    zoomWithScroll: true,\n  }\n\n  imageRef: React.RefObject<HTMLImageElement> = React.createRef()\n  videoRef: React.RefObject<HTMLVideoElement> = React.createRef()\n  containerRef: HTMLDivElement | null = null\n  styleRef: HTMLStyleElement | null = null\n  containerRect: DOMRect | null = null\n  mediaSize: MediaSize = { width: 0, height: 0, naturalWidth: 0, naturalHeight: 0 }\n  dragStartPosition: Point = { x: 0, y: 0 }\n  dragStartCrop: Point = { x: 0, y: 0 }\n  lastPinchDistance = 0\n  lastPinchRotation = 0\n  rafDragTimeout: number | null = null\n  rafPinchTimeout: number | null = null\n  wheelTimer: number | null = null\n\n  state: State = {\n    cropSize: null,\n    hasWheelJustStarted: false,\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.computeSizes)\n    if (this.containerRef) {\n      this.props.zoomWithScroll &&\n        this.containerRef.addEventListener('wheel', this.onWheel, { passive: false })\n      this.containerRef.addEventListener('gesturestart', this.preventZoomSafari)\n      this.containerRef.addEventListener('gesturechange', this.preventZoomSafari)\n    }\n\n    if (!this.props.disableAutomaticStylesInjection) {\n      this.styleRef = document.createElement('style')\n      this.styleRef.setAttribute('type', 'text/css')\n      if (this.props.nonce) {\n        this.styleRef.setAttribute('nonce', this.props.nonce);\n      }\n      this.styleRef.innerHTML = cssStyles\n      document.head.appendChild(this.styleRef)\n    }\n\n    // when rendered via SSR, the image can already be loaded and its onLoad callback will never be called\n    if (this.imageRef.current && this.imageRef.current.complete) {\n      this.onMediaLoad()\n    }\n\n    // set image and video refs in the parent if the callbacks exist\n    if (this.props.setImageRef) {\n      this.props.setImageRef(this.imageRef)\n    }\n\n    if (this.props.setVideoRef) {\n      this.props.setVideoRef(this.videoRef)\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.computeSizes)\n    if (this.containerRef) {\n      this.containerRef.removeEventListener('gesturestart', this.preventZoomSafari)\n      this.containerRef.removeEventListener('gesturechange', this.preventZoomSafari)\n    }\n\n    if (this.styleRef) {\n      this.styleRef.parentNode?.removeChild(this.styleRef)\n    }\n\n    this.cleanEvents()\n    this.props.zoomWithScroll && this.clearScrollEvent()\n  }\n\n  componentDidUpdate(prevProps: CropperProps) {\n    if (prevProps.rotation !== this.props.rotation) {\n      this.computeSizes()\n      this.recomputeCropPosition()\n    } else if (prevProps.aspect !== this.props.aspect) {\n      this.computeSizes()\n    } else if (prevProps.zoom !== this.props.zoom) {\n      this.recomputeCropPosition()\n    } else if (\n      prevProps.cropSize?.height !== this.props.cropSize?.height ||\n      prevProps.cropSize?.width !== this.props.cropSize?.width\n    ) {\n      this.computeSizes()\n    } else if (\n      prevProps.crop?.x !== this.props.crop?.x ||\n      prevProps.crop?.y !== this.props.crop?.y\n    ) {\n      this.emitCropAreaChange()\n    }\n    if (prevProps.zoomWithScroll !== this.props.zoomWithScroll && this.containerRef) {\n      this.props.zoomWithScroll\n        ? this.containerRef.addEventListener('wheel', this.onWheel, { passive: false })\n        : this.clearScrollEvent()\n    }\n    if (prevProps.video !== this.props.video) {\n      this.videoRef.current?.load()\n    }\n  }\n\n  // this is to prevent Safari on iOS >= 10 to zoom the page\n  preventZoomSafari = (e: Event) => e.preventDefault()\n\n  cleanEvents = () => {\n    document.removeEventListener('mousemove', this.onMouseMove)\n    document.removeEventListener('mouseup', this.onDragStopped)\n    document.removeEventListener('touchmove', this.onTouchMove)\n    document.removeEventListener('touchend', this.onDragStopped)\n  }\n\n  clearScrollEvent = () => {\n    if (this.containerRef) this.containerRef.removeEventListener('wheel', this.onWheel)\n    if (this.wheelTimer) {\n      clearTimeout(this.wheelTimer)\n    }\n  }\n\n  onMediaLoad = () => {\n    const cropSize = this.computeSizes()\n\n    if (cropSize) {\n      this.emitCropData()\n      this.setInitialCrop(cropSize)\n    }\n\n    if (this.props.onMediaLoaded) {\n      this.props.onMediaLoaded(this.mediaSize)\n    }\n  }\n\n  setInitialCrop = (cropSize: Size) => {\n    if (this.props.initialCroppedAreaPercentages) {\n      const { crop, zoom } = getInitialCropFromCroppedAreaPercentages(\n        this.props.initialCroppedAreaPercentages,\n        this.mediaSize,\n        this.props.rotation,\n        cropSize,\n        this.props.minZoom,\n        this.props.maxZoom\n      )\n\n      this.props.onCropChange(crop)\n      this.props.onZoomChange && this.props.onZoomChange(zoom)\n    } else if (this.props.initialCroppedAreaPixels) {\n      const { crop, zoom } = getInitialCropFromCroppedAreaPixels(\n        this.props.initialCroppedAreaPixels,\n        this.mediaSize,\n        this.props.rotation,\n        cropSize,\n        this.props.minZoom,\n        this.props.maxZoom\n      )\n\n      this.props.onCropChange(crop)\n      this.props.onZoomChange && this.props.onZoomChange(zoom)\n    }\n  }\n\n  getAspect() {\n    const { cropSize, aspect } = this.props\n    if (cropSize) {\n      return cropSize.width / cropSize.height\n    }\n    return aspect\n  }\n\n  computeSizes = () => {\n    const mediaRef = this.imageRef.current || this.videoRef.current\n\n    if (mediaRef && this.containerRef) {\n      this.containerRect = this.containerRef.getBoundingClientRect()\n      const containerAspect = this.containerRect.width / this.containerRect.height\n      const naturalWidth = this.imageRef.current?.naturalWidth || this.videoRef.current?.videoWidth || 0\n      const naturalHeight = this.imageRef.current?.naturalHeight || this.videoRef.current?.videoHeight || 0\n      const isMediaScaledDown =\n        mediaRef.offsetWidth < naturalWidth || mediaRef.offsetHeight < naturalHeight\n      const mediaAspect = naturalWidth / naturalHeight\n\n      // We do not rely on the offsetWidth/offsetHeight if the media is scaled down\n      // as the values they report are rounded. That will result in precision losses\n      // when calculating zoom. We use the fact that the media is positionned relative\n      // to the container. That allows us to use the container's dimensions\n      // and natural aspect ratio of the media to calculate accurate media size.\n      // However, for this to work, the container should not be rotated\n      let renderedMediaSize: Size\n\n      if (isMediaScaledDown) {\n        switch (this.props.objectFit) {\n          default:\n          case 'contain':\n            renderedMediaSize =\n              containerAspect > mediaAspect\n                ? {\n                    width: this.containerRect.height * mediaAspect,\n                    height: this.containerRect.height,\n                  }\n                : {\n                    width: this.containerRect.width,\n                    height: this.containerRect.width / mediaAspect,\n                  }\n            break\n          case 'horizontal-cover':\n            renderedMediaSize = {\n              width: this.containerRect.width,\n              height: this.containerRect.width / mediaAspect,\n            }\n            break\n          case 'vertical-cover':\n            renderedMediaSize = {\n              width: this.containerRect.height * mediaAspect,\n              height: this.containerRect.height,\n            }\n            break\n          case 'auto-cover':\n            renderedMediaSize =\n              naturalWidth > naturalHeight\n                ? {\n                    width: this.containerRect.width,\n                    height: this.containerRect.width / mediaAspect,\n                  }\n                : {\n                    width: this.containerRect.height * mediaAspect,\n                    height: this.containerRect.height,\n                  }\n            break\n        }\n      } else {\n        renderedMediaSize = {\n          width: mediaRef.offsetWidth,\n          height: mediaRef.offsetHeight,\n        }\n      }\n\n      this.mediaSize = {\n        ...renderedMediaSize,\n        naturalWidth,\n        naturalHeight,\n      }\n\n      const cropSize = this.props.cropSize\n        ? this.props.cropSize\n        : getCropSize(\n            this.mediaSize.width,\n            this.mediaSize.height,\n            this.containerRect.width,\n            this.containerRect.height,\n            this.props.aspect,\n            this.props.rotation\n          )\n\n      if (\n        this.state.cropSize?.height !== cropSize.height ||\n        this.state.cropSize?.width !== cropSize.width\n      ) {\n        this.props.onCropSizeChange && this.props.onCropSizeChange(cropSize)\n      }\n      this.setState({ cropSize }, this.recomputeCropPosition)\n\n      return cropSize\n    }\n  }\n\n  static getMousePoint = (e: MouseEvent | React.MouseEvent) => ({\n    x: Number(e.clientX),\n    y: Number(e.clientY),\n  })\n\n  static getTouchPoint = (touch: Touch | React.Touch) => ({\n    x: Number(touch.clientX),\n    y: Number(touch.clientY),\n  })\n\n  onMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.preventDefault()\n    document.addEventListener('mousemove', this.onMouseMove)\n    document.addEventListener('mouseup', this.onDragStopped)\n    this.onDragStart(Cropper.getMousePoint(e))\n  }\n\n  onMouseMove = (e: MouseEvent) => this.onDrag(Cropper.getMousePoint(e))\n\n  onTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\n    if (this.props.onTouchRequest && !this.props.onTouchRequest(e)) {\n      return\n    }\n\n    document.addEventListener('touchmove', this.onTouchMove, { passive: false }) // iOS 11 now defaults to passive: true\n    document.addEventListener('touchend', this.onDragStopped)\n\n    if (e.touches.length === 2) {\n      this.onPinchStart(e)\n    } else if (e.touches.length === 1) {\n      this.onDragStart(Cropper.getTouchPoint(e.touches[0]))\n    }\n  }\n\n  onTouchMove = (e: TouchEvent) => {\n    // Prevent whole page from scrolling on iOS.\n    e.preventDefault()\n    if (e.touches.length === 2) {\n      this.onPinchMove(e)\n    } else if (e.touches.length === 1) {\n      this.onDrag(Cropper.getTouchPoint(e.touches[0]))\n    }\n  }\n\n  onDragStart = ({ x, y }: Point) => {\n    this.dragStartPosition = { x, y }\n    this.dragStartCrop = { ...this.props.crop }\n    this.props.onInteractionStart?.()\n  }\n\n  onDrag = ({ x, y }: Point) => {\n    if (this.rafDragTimeout) window.cancelAnimationFrame(this.rafDragTimeout)\n\n    this.rafDragTimeout = window.requestAnimationFrame(() => {\n      if (!this.state.cropSize) return\n      if (x === undefined || y === undefined) return\n      const offsetX = x - this.dragStartPosition.x\n      const offsetY = y - this.dragStartPosition.y\n      const requestedPosition = {\n        x: this.dragStartCrop.x + offsetX,\n        y: this.dragStartCrop.y + offsetY,\n      }\n\n      const newPosition = this.props.restrictPosition\n        ? restrictPosition(\n            requestedPosition,\n            this.mediaSize,\n            this.state.cropSize,\n            this.props.zoom,\n            this.props.rotation\n          )\n        : requestedPosition\n      this.props.onCropChange(newPosition)\n    })\n  }\n\n  onDragStopped = () => {\n    this.cleanEvents()\n    this.emitCropData()\n    this.props.onInteractionEnd?.()\n  }\n\n  onPinchStart(e: React.TouchEvent<HTMLDivElement>) {\n    const pointA = Cropper.getTouchPoint(e.touches[0])\n    const pointB = Cropper.getTouchPoint(e.touches[1])\n    this.lastPinchDistance = getDistanceBetweenPoints(pointA, pointB)\n    this.lastPinchRotation = getRotationBetweenPoints(pointA, pointB)\n    this.onDragStart(getCenter(pointA, pointB))\n  }\n\n  onPinchMove(e: TouchEvent) {\n    const pointA = Cropper.getTouchPoint(e.touches[0])\n    const pointB = Cropper.getTouchPoint(e.touches[1])\n    const center = getCenter(pointA, pointB)\n    this.onDrag(center)\n\n    if (this.rafPinchTimeout) window.cancelAnimationFrame(this.rafPinchTimeout)\n    this.rafPinchTimeout = window.requestAnimationFrame(() => {\n      const distance = getDistanceBetweenPoints(pointA, pointB)\n      const newZoom = this.props.zoom * (distance / this.lastPinchDistance)\n      this.setNewZoom(newZoom, center)\n      this.lastPinchDistance = distance\n\n      const rotation = getRotationBetweenPoints(pointA, pointB)\n      const newRotation = this.props.rotation + (rotation - this.lastPinchRotation)\n      this.props.onRotationChange && this.props.onRotationChange(newRotation)\n      this.lastPinchRotation = rotation\n    })\n  }\n\n  onWheel = (e: WheelEvent) => {\n    if (this.props.onWheelRequest && !this.props.onWheelRequest(e)) {\n      return\n    }\n\n    e.preventDefault()\n    const point = Cropper.getMousePoint(e)\n    const { pixelY } = normalizeWheel(e)\n    const newZoom = this.props.zoom - (pixelY * this.props.zoomSpeed) / 200\n    this.setNewZoom(newZoom, point)\n\n    if (!this.state.hasWheelJustStarted) {\n      this.setState({ hasWheelJustStarted: true }, () => this.props.onInteractionStart?.())\n    }\n\n    if (this.wheelTimer) {\n      clearTimeout(this.wheelTimer)\n    }\n    this.wheelTimer = window.setTimeout(\n      () => this.setState({ hasWheelJustStarted: false }, () => this.props.onInteractionEnd?.()),\n      250\n    )\n  }\n\n  getPointOnContainer = ({ x, y }: Point) => {\n    if (!this.containerRect) {\n      throw new Error('The Cropper is not mounted')\n    }\n    return {\n      x: this.containerRect.width / 2 - (x - this.containerRect.left),\n      y: this.containerRect.height / 2 - (y - this.containerRect.top),\n    }\n  }\n\n  getPointOnMedia = ({ x, y }: Point) => {\n    const { crop, zoom } = this.props\n    return {\n      x: (x + crop.x) / zoom,\n      y: (y + crop.y) / zoom,\n    }\n  }\n\n  setNewZoom = (zoom: number, point: Point) => {\n    if (!this.state.cropSize || !this.props.onZoomChange) return\n\n    const zoomPoint = this.getPointOnContainer(point)\n    const zoomTarget = this.getPointOnMedia(zoomPoint)\n    const newZoom = clamp(zoom, this.props.minZoom, this.props.maxZoom)\n    const requestedPosition = {\n      x: zoomTarget.x * newZoom - zoomPoint.x,\n      y: zoomTarget.y * newZoom - zoomPoint.y,\n    }\n    const newPosition = this.props.restrictPosition\n      ? restrictPosition(\n          requestedPosition,\n          this.mediaSize,\n          this.state.cropSize,\n          newZoom,\n          this.props.rotation\n        )\n      : requestedPosition\n\n    this.props.onCropChange(newPosition)\n    this.props.onZoomChange(newZoom)\n  }\n\n  getCropData = () => {\n    if (!this.state.cropSize) {\n      return null\n    }\n\n    // this is to ensure the crop is correctly restricted after a zoom back (https://github.com/ValentinH/react-easy-crop/issues/6)\n    const restrictedPosition = this.props.restrictPosition\n      ? restrictPosition(\n          this.props.crop,\n          this.mediaSize,\n          this.state.cropSize,\n          this.props.zoom,\n          this.props.rotation\n        )\n      : this.props.crop\n    return computeCroppedArea(\n      restrictedPosition,\n      this.mediaSize,\n      this.state.cropSize,\n      this.getAspect(),\n      this.props.zoom,\n      this.props.rotation,\n      this.props.restrictPosition\n    )\n  }\n\n  emitCropData = () => {\n    const cropData = this.getCropData()\n    if (!cropData) return\n\n    const { croppedAreaPercentages, croppedAreaPixels } = cropData\n    if (this.props.onCropComplete) {\n      this.props.onCropComplete(croppedAreaPercentages, croppedAreaPixels)\n    }\n\n    if (this.props.onCropAreaChange) {\n      this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels)\n    }\n  }\n\n  emitCropAreaChange = () => {\n    const cropData = this.getCropData()\n    if (!cropData) return\n\n    const { croppedAreaPercentages, croppedAreaPixels } = cropData\n    if (this.props.onCropAreaChange) {\n      this.props.onCropAreaChange(croppedAreaPercentages, croppedAreaPixels)\n    }\n  }\n\n  recomputeCropPosition = () => {\n    if (!this.state.cropSize) return\n\n    const newPosition = this.props.restrictPosition\n      ? restrictPosition(\n          this.props.crop,\n          this.mediaSize,\n          this.state.cropSize,\n          this.props.zoom,\n          this.props.rotation\n        )\n      : this.props.crop\n\n    this.props.onCropChange(newPosition)\n    this.emitCropData()\n  }\n\n  render() {\n    const {\n      image,\n      video,\n      mediaProps,\n      transform,\n      crop: { x, y },\n      rotation,\n      zoom,\n      cropShape,\n      showGrid,\n      style: { containerStyle, cropAreaStyle, mediaStyle },\n      classes: { containerClassName, cropAreaClassName, mediaClassName },\n      objectFit,\n    } = this.props\n\n    return (\n      <div\n        onMouseDown={this.onMouseDown}\n        onTouchStart={this.onTouchStart}\n        ref={(el) => (this.containerRef = el)}\n        data-testid=\"container\"\n        style={containerStyle}\n        className={classNames('reactEasyCrop_Container', containerClassName)}\n      >\n        {image ? (\n          <img\n            alt=\"\"\n            className={classNames(\n              'reactEasyCrop_Image',\n              objectFit === 'contain' && 'reactEasyCrop_Contain',\n              objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal',\n              objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical',\n              objectFit === 'auto-cover' &&\n                (this.mediaSize.naturalWidth > this.mediaSize.naturalHeight\n                  ? 'reactEasyCrop_Cover_Horizontal'\n                  : 'reactEasyCrop_Cover_Vertical'),\n              mediaClassName\n            )}\n            {...(mediaProps as React.ImgHTMLAttributes<HTMLElement>)}\n            src={image}\n            ref={this.imageRef}\n            style={{\n              ...mediaStyle,\n              transform:\n                transform || `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${zoom})`,\n            }}\n            onLoad={this.onMediaLoad}\n          />\n        ) : (\n          video && (\n            <video\n              autoPlay\n              loop\n              muted={true}\n              className={classNames(\n                'reactEasyCrop_Video',\n                objectFit === 'contain' && 'reactEasyCrop_Contain',\n                objectFit === 'horizontal-cover' && 'reactEasyCrop_Cover_Horizontal',\n                objectFit === 'vertical-cover' && 'reactEasyCrop_Cover_Vertical',\n                objectFit === 'auto-cover' &&\n                  (this.mediaSize.naturalWidth > this.mediaSize.naturalHeight\n                    ? 'reactEasyCrop_Cover_Horizontal'\n                    : 'reactEasyCrop_Cover_Vertical'),\n                mediaClassName\n              )}\n              {...mediaProps}\n              ref={this.videoRef}\n              onLoadedMetadata={this.onMediaLoad}\n              style={{\n                ...mediaStyle,\n                transform:\n                  transform || `translate(${x}px, ${y}px) rotate(${rotation}deg) scale(${zoom})`,\n              }}\n              controls={false}\n            >\n              {(Array.isArray(video) ? video : [{ src: video }]).map((item) => (\n                <source key={item.src} {...item} />\n              ))}\n            </video>\n          )\n        )}\n        {this.state.cropSize && (\n          <div\n            style={{\n              ...cropAreaStyle,\n              width: this.state.cropSize.width,\n              height: this.state.cropSize.height,\n            }}\n            data-testid=\"cropper\"\n            className={classNames(\n              'reactEasyCrop_CropArea',\n              cropShape === 'round' && 'reactEasyCrop_CropAreaRound',\n              showGrid && 'reactEasyCrop_CropAreaGrid',\n              cropAreaClassName\n            )}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Cropper\n"]},"metadata":{},"sourceType":"module"}